---
# Copyright (c) 2017-2023 VMware, Inc. or its affiliates
# SPDX-License-Identifier: Apache-2.0

resource_types:
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: ((upgrade/gpupgrade-git-remote))
    private_key: ((upgrade/gpupgrade-deploy-key))
    branch: ((gpupgrade-git-branch))
    fetch_tags: true

{{range .MajorVersions}}
- name: gpdb{{.}}_src
  type: git
  source:
    uri: git@github.com:greenplum-db/gpdb.git
    private_key: ((server/gpdb-deploy-key))
    {{if eq . "7"}}
    branch: main
    {{else}}
    branch: {{.}}X_STABLE
    {{end}}
{{end}}


- name: retail_demo_src
  type: git
  source:
    uri: git@github.com:pivotal/gp-industry-retail-demo.git
    private_key: ((upgrade/retail-demo-git-key))
    branch: main

# gpupgrade tests with release candidates for the source and target version.
# This allows for faster feedback for example when changes are made to
# pg_upgrade. Specifically, the following scenario has occurred where a
# pg_upgrade check was added requiring a function to be installed in both the
# source and target clusters. In order to test this scenario release candidate
# builds are needed.
{{range .GPDBVersions}}
- name: gpdb{{.GPDBVersion}}_{{.Platform}}_rpm
  type: gcs
  source:
    {{- if .TestRCIdentifier }}
      # Test release candidate rpms built with --build-test-rc are published to the -dev bucket.
      bucket: pivotal-gpdb-concourse-resources-dev
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/gpdb{{.GPDBVersion}}/greenplum-db-{{.TestRCIdentifier}}({{escapeVersion .GPDBVersion}}.*)-{{.RpmVersion}}-x86_64.debug.rpm
    {{ continue }}
    {{- end }}
    {{- if eq .GPDBVersion "5" }}
      bucket: pivotal-gpdb-concourse-resources-prod
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/gpdb{{.GPDBVersion}}/greenplum-db-{{.TestRCIdentifier}}({{escapeVersion .GPDBVersion}}.*)-{{.RpmVersion}}-x86_64.debug.rpm
    {{ continue }}
    {{- end }}
    {{- if and (eq .GPDBVersion "6") (eq .Platform "rocky8") }}
      bucket: pivotal-gpdb-concourse-resources-prod
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/gpdb6/greenplum-db-(.*)-rhel8-x86_64.debug.rpm
    {{ continue }}
    {{end}}
    {{- if eq .GPDBVersion "7" }}
      bucket: pivotal-gpdb-concourse-resources-prod
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/main/greenplum-db-(.*)-el8-x86_64.debug.rpm
    {{ continue }}
    {{- end }}
      # Releng cannot produce a release candidate RPM that once tagged produces a corresponding RPM with the correct
      # version. Rather another commit is needed to correctly increment the version. This causes lots of headaches for
      # gpupgrade since we compile in a minimum GPDB version causing gpupgrade release to wait for the correct version of
      # GPDB to flow through the pipelines. For now, use a release candidate that has the future minor version rather than
      # the current minor version. This is problematic since the commit sha and this future version do not correctly
      # match reality.
      bucket: pivotal-gpdb-concourse-resources-prod
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: minor/release-candidates/gpdb{{.GPDBVersion}}/greenplum-db-server-({{escapeVersion .GPDBVersion}}.*)-{{.RpmVersion}}-x86_64.rpm
{{end}}

- name: enterprise_rpm
  type: gcs
  source:
    bucket: gpupgrade-intermediates
    json_key: ((upgrade/cm-gcs-service-account-key))
    versioned_file: enterprise/gpupgrade-intermediate.el7.x86_64.rpm

- name: enterprise_rc_rpm
  type: gcs
  source:
    bucket: gpupgrade-artifacts-{{.JobType}}
    json_key: ((upgrade/cm-gcs-service-account-key))
    regexp: release-candidates/enterprise/gpupgrade-(.*).rpm

- name: ccp_src
  type: git
  source:
    branch: main
    private_key: ((gp-concourse-cluster-provisioner-git-key))
    uri: git@github.com:pivotal/gp-concourse-cluster-provisioner.git

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((upgrade/{{.JobType}}/google-service-account-key))
    vars:
      project_id: ((upgrade/{{.JobType}}/google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: us-west-2
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: terraform.d
  source:
    access_key_id: ((aws-bucket-access-key-id))
    secret_access_key: ((aws-bucket-secret-access-key))
    region_name: us-west-2
    bucket: ccp-terraform-provider-plugins
    versioned_file: plugin-cache.tgz
  type: s3

{{range .GPDBVersions}}
{{- if and (eq .GPDBVersion "5") (eq .Platform "centos6") -}}
- name: icw_planner_gpdb5_centos6_dump
  type: gcs
  source:
    # FIXME: When flying a dev or prod pipeline we use the -dev or -prod
    # bucket. However, for dev pipelines the -dev bucket does not have this
    # artifact, causing all jobs that use this resource to hang. So for now
    # hardcode it to the bucket with the artifact.
    # bucket: ((gcs-bucket-intermediates))
    bucket: pivotal-gpdb-concourse-resources-intermediates-prod
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 5X_STABLE/icw_planner_centos6_dump/dump.sql.xz
{{- end}}
{{- if and (eq .GPDBVersion "6") (eq .Platform "rocky8") -}}
- name: icw_planner_gpdb6_rocky8_dump
  type: gcs
  source:
    bucket: pivotal-gpdb-concourse-resources-intermediates-prod
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 6X_STABLE/icw_planner_rocky8_dump/dump.sql.xz
{{- end}}
{{end}}

# The postgis dump is a static file that was created by taking objects from the
# postgis regression tests and "not" dropping the databases associated with
# them to preserve the objects.
- name: postgis_2.1.5_dump
  type: gcs
  source:
    json_key: ((upgrade/cm-gcs-service-account-key))
    bucket: gpupgrade-intermediates
    versioned_file: extensions/postgis215_dump.sql

{{range .GPDBVersions}}
# To avoid too many jobs we only run extensions on when SpecialJobs is true for
# select operating systems.
{{- if .SpecialJobs }}
- name: postgis_2.x_gpdb{{.GPDBVersion}}_{{.Platform}}_gppkg
  type: gcs
  source:
    json_key: ((concourse-gcs-resources-service-account-key))
    bucket: pivotal-gpdb-concourse-resources-prod
    regexp: postgis/released/gpdb{{.GPDBVersion}}/postgis-2.1.5\+(.*)-gp{{.GPDBVersion}}-{{.RpmVersion}}-x86_64.gppkg

- name: madlib_1.x_gpdb{{.GPDBVersion}}_{{.Platform}}_gppkg
  type: s3
  source:
    access_key_id: ((madlib-s3-access_key_id))
    secret_access_key: ((madlib-s3-secret_access_key))
    region_name: us-west-2
    bucket: madlib-artifacts
    versioned_file: bin_madlib_artifacts_{{.Platform}}/madlib-master-gp{{.GPDBVersion}}-{{.RpmVersion}}-x86_64.gppkg

# NOTE: The same gptext artifact is used for both gpdb5 and gpdb6. Also, the same
# rhel6 artifact is used for both centos6 and centos7, since the rhel7 artifact
# does not support gpdb5.
- name: gptext_3.x_gpdb{{.GPDBVersion}}_{{.RpmVersion}}_targz
  type: gcs
  source:
    json_key: ((concourse-gcs-resources-service-account-key))
    bucket: pivotal-gpdb-concourse-resources-prod
    regexp: gptext/released/gpdb6/greenplum-text-(.*)-{{.RpmVersion}}_x86_64.tar.gz

# NOTE: Skip creating the pxf resources for centos6 since pxf6 is not
# supported for centos6. Thus, we can only test pxf upgrades on centos7.
# NOTE: The resource name is _rpm even though the artifact is a tar.gz since
# pxf SNAPSHOT builds are only available as an rpm inside a tar.gz.
{{- if ne .Platform "rocky8" }}
- name: pxf_6_gpdb{{.GPDBVersion}}_{{.Platform}}_rpm
  type: gcs
  source:
    json_key: ((ud/pxf/secrets/pxf-storage-service-account-key))
    bucket: data-gpdb-ud-pxf-build
    versioned_file: prod/snapshots/pxf6/pxf-gp{{.GPDBVersion}}.el{{RpmVersionNumber .RpmVersion}}.tar.gz
{{- end }}

- name: plr_gpdb{{.GPDBVersion}}_{{.Platform}}_gppkg
  type: gcs
  source:
    json_key: ((concourse-gcs-resources-service-account-key))
    bucket: pivotal-gpdb-concourse-resources-prod
    regexp: plr/released/gpdb{{.GPDBVersion}}/plr-(.*)-gp{{.GPDBVersion}}-{{.RpmVersion}}-x86_64.gppkg

# NOTE: plcontainer is only supported for centos7. And plcontainer 1.x is only for GPDB 5X.
{{- if eq .GPDBVersion "5" }}
- name: plcontainer_1.x_gpdb{{.GPDBVersion}}_{{.Platform}}_gppkg
  type: gcs
  source:
    json_key: ((concourse-gcs-resources-service-account-key))
    bucket: pivotal-gpdb-concourse-resources-prod
    regexp: plcontainer/released/gpdb{{.GPDBVersion}}/plcontainer-1.(.*)-{{.RpmVersion}}-x86_64.gppkg
{{- end }}

# NOTE: plcontainer is only supported for centos7. And plcontainer 2.x is only for GPDB 6X.
{{- if and (eq .GPDBVersion "6") (ne .Platform "rocky8") }}
- name: plcontainer_2.x_gpdb{{.GPDBVersion}}_{{.Platform}}_gppkg
  type: gcs
  source:
    json_key: ((concourse-gcs-resources-service-account-key))
    bucket: pivotal-gpdb-concourse-resources-prod
    regexp: plcontainer/released/gpdb{{.GPDBVersion}}/plcontainer-2.(.*)-gp{{.GPDBVersion}}-{{.RpmVersion}}_x86_64.gppkg
{{- end }}

{{- end}}
{{end}}

anchors:
  - &ccp_default_params
    action: create
    delete_on_failure: true
    generate_random_name: true
    plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
    terraform_source: ccp_src/google/

  - &ccp_gen_cluster_default_params
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: us-west-2
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: gpdb5-pipeline-dynamic-terraform
    CLOUD_PROVIDER: google

  - &ccp_destroy
    put: terraform
    params:
      action: destroy
      plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
      env_name_file: terraform/name
      terraform_source: ccp_src/google/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

  - &set_failed
    task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: gcr.io/data-gpdb-public-images/ccp
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: ccp_src/google/ccp_failed_test.sh
      params:
        GOOGLE_CREDENTIALS: ((upgrade/{{.JobType}}/google-service-account-key))
        GOOGLE_PROJECT_ID: ((upgrade/{{.JobType}}/google-project-id))
        GOOGLE_ZONE: us-central1-a
        AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
        AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
        AWS_DEFAULT_REGION: us-west-2
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: gpdb5-pipeline-dynamic-terraform

groups:
  - name: all
    jobs:
      - build
      - lint
      - unit-and-integration-tests
      {{- range .AcceptanceJobs}}
      - {{.Name}}
      {{- end}}
      {{- range .PgupgradeJobs}}
      - {{.Name}}
      {{- end}}
      {{- range .MultihostAcceptanceJobs}}
      - {{.Name}}
      {{- end}}
      {{- range .UpgradeJobs}}
      - {{.Name}}
      {{- end}}
      - publish-release-candidate
  - name: acceptance
    jobs:
      {{- range .AcceptanceJobs}}
      - {{.Name}}
      {{- end}}
      {{- range .MultihostAcceptanceJobs}}
      - {{.Name}}
      {{- end}}
  - name: e2e-upgrade
    jobs:
      {{- range .UpgradeJobs}}
      {{- if not .RetailDemo}}
      - {{.Name}}
      {{- end}}
      {{- end}}
  - name: e2e-functional
    jobs:
      {{- range .UpgradeJobs }}
      {{- if .RetailDemo }}
      - {{.Name}}
      {{- end }}
      {{- end }}
  - name: e2e-extension
    jobs:
      {{- range .UpgradeJobs}}
      {{- if .TestExtensions}}
      - {{.Name}}
      {{- end}}
      {{- end}}
  - name: pg_upgrade
    jobs:
      {{- range .PgupgradeJobs}}
      - {{.Name}}
      {{- end }}
