// Copyright (c) 2017-2023 VMware, Inc. or its affiliates
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: cli_to_hub.proto

package idl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Step int32

const (
	Step_unknown_step Step = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Step_initialize   Step = 1
	Step_execute      Step = 2
	Step_finalize     Step = 3
	Step_revert       Step = 4
	Step_stats        Step = 5 // used for data migration script phase
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0: "unknown_step",
		1: "initialize",
		2: "execute",
		3: "finalize",
		4: "revert",
		5: "stats",
	}
	Step_value = map[string]int32{
		"unknown_step": 0,
		"initialize":   1,
		"execute":      2,
		"finalize":     3,
		"revert":       4,
		"stats":        5,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[0].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[0]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{0}
}

type Substep int32

const (
	Substep_unknown_substep                                               Substep = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Substep_saving_source_cluster_config                                  Substep = 1
	Substep_start_hub                                                     Substep = 2
	Substep_start_agents                                                  Substep = 3
	Substep_check_environment                                             Substep = 4
	Substep_check_disk_space                                              Substep = 5
	Substep_generate_target_config                                        Substep = 6
	Substep_init_target_cluster                                           Substep = 7
	Substep_shutdown_target_cluster                                       Substep = 8
	Substep_backup_target_master                                          Substep = 9
	Substep_check_upgrade                                                 Substep = 10
	Substep_shutdown_source_cluster                                       Substep = 11
	Substep_upgrade_master                                                Substep = 12
	Substep_copy_master                                                   Substep = 13
	Substep_upgrade_primaries                                             Substep = 14
	Substep_start_target_cluster                                          Substep = 15
	Substep_update_target_catalog                                         Substep = 16
	Substep_update_data_directories                                       Substep = 17
	Substep_update_target_conf_files                                      Substep = 18
	Substep_upgrade_standby                                               Substep = 19
	Substep_upgrade_mirrors                                               Substep = 20
	Substep_delete_tablespaces                                            Substep = 21
	Substep_delete_target_cluster_datadirs                                Substep = 22
	Substep_delete_segment_statedirs                                      Substep = 23
	Substep_stop_hub_and_agents                                           Substep = 24
	Substep_delete_master_statedir                                        Substep = 25
	Substep_archive_log_directories                                       Substep = 26
	Substep_restore_source_cluster                                        Substep = 27
	Substep_start_source_cluster                                          Substep = 28
	Substep_restore_pgcontrol                                             Substep = 29
	Substep_recoverseg_source_cluster                                     Substep = 30
	Substep_step_status                                                   Substep = 31
	Substep_wait_for_cluster_to_be_ready_after_adding_mirrors_and_standby Substep = 32
	Substep_wait_for_cluster_to_be_ready_after_updating_catalog           Substep = 33
	Substep_setting_dynamic_library_path_on_target_cluster                Substep = 34
	Substep_check_active_connections_on_source_cluster                    Substep = 35
	Substep_check_active_connections_on_target_cluster                    Substep = 36
	Substep_generate_data_migration_scripts                               Substep = 37
	Substep_execute_stats_data_migration_scripts                          Substep = 38
	Substep_execute_initialize_data_migration_scripts                     Substep = 39
	Substep_execute_finalize_data_migration_scripts                       Substep = 40
	Substep_execute_revert_data_migration_scripts                         Substep = 41
	Substep_create_backupdirs                                             Substep = 42
	Substep_delete_backupdir                                              Substep = 43
	Substep_analyze_target_cluster                                        Substep = 44
	Substep_ensure_gpupgrade_agents_are_running                           Substep = 45
	Substep_verify_gpdb_versions                                          Substep = 46
	Substep_verify_gpupgrade_is_installed_across_all_hosts                Substep = 47
	Substep_initialize_wait_for_cluster_to_be_ready                       Substep = 48
	Substep_wait_for_cluster_to_be_ready_before_upgrade_master            Substep = 49
)

// Enum value maps for Substep.
var (
	Substep_name = map[int32]string{
		0:  "unknown_substep",
		1:  "saving_source_cluster_config",
		2:  "start_hub",
		3:  "start_agents",
		4:  "check_environment",
		5:  "check_disk_space",
		6:  "generate_target_config",
		7:  "init_target_cluster",
		8:  "shutdown_target_cluster",
		9:  "backup_target_master",
		10: "check_upgrade",
		11: "shutdown_source_cluster",
		12: "upgrade_master",
		13: "copy_master",
		14: "upgrade_primaries",
		15: "start_target_cluster",
		16: "update_target_catalog",
		17: "update_data_directories",
		18: "update_target_conf_files",
		19: "upgrade_standby",
		20: "upgrade_mirrors",
		21: "delete_tablespaces",
		22: "delete_target_cluster_datadirs",
		23: "delete_segment_statedirs",
		24: "stop_hub_and_agents",
		25: "delete_master_statedir",
		26: "archive_log_directories",
		27: "restore_source_cluster",
		28: "start_source_cluster",
		29: "restore_pgcontrol",
		30: "recoverseg_source_cluster",
		31: "step_status",
		32: "wait_for_cluster_to_be_ready_after_adding_mirrors_and_standby",
		33: "wait_for_cluster_to_be_ready_after_updating_catalog",
		34: "setting_dynamic_library_path_on_target_cluster",
		35: "check_active_connections_on_source_cluster",
		36: "check_active_connections_on_target_cluster",
		37: "generate_data_migration_scripts",
		38: "execute_stats_data_migration_scripts",
		39: "execute_initialize_data_migration_scripts",
		40: "execute_finalize_data_migration_scripts",
		41: "execute_revert_data_migration_scripts",
		42: "create_backupdirs",
		43: "delete_backupdir",
		44: "analyze_target_cluster",
		45: "ensure_gpupgrade_agents_are_running",
		46: "verify_gpdb_versions",
		47: "verify_gpupgrade_is_installed_across_all_hosts",
		48: "initialize_wait_for_cluster_to_be_ready",
		49: "wait_for_cluster_to_be_ready_before_upgrade_master",
	}
	Substep_value = map[string]int32{
		"unknown_substep":                0,
		"saving_source_cluster_config":   1,
		"start_hub":                      2,
		"start_agents":                   3,
		"check_environment":              4,
		"check_disk_space":               5,
		"generate_target_config":         6,
		"init_target_cluster":            7,
		"shutdown_target_cluster":        8,
		"backup_target_master":           9,
		"check_upgrade":                  10,
		"shutdown_source_cluster":        11,
		"upgrade_master":                 12,
		"copy_master":                    13,
		"upgrade_primaries":              14,
		"start_target_cluster":           15,
		"update_target_catalog":          16,
		"update_data_directories":        17,
		"update_target_conf_files":       18,
		"upgrade_standby":                19,
		"upgrade_mirrors":                20,
		"delete_tablespaces":             21,
		"delete_target_cluster_datadirs": 22,
		"delete_segment_statedirs":       23,
		"stop_hub_and_agents":            24,
		"delete_master_statedir":         25,
		"archive_log_directories":        26,
		"restore_source_cluster":         27,
		"start_source_cluster":           28,
		"restore_pgcontrol":              29,
		"recoverseg_source_cluster":      30,
		"step_status":                    31,
		"wait_for_cluster_to_be_ready_after_adding_mirrors_and_standby": 32,
		"wait_for_cluster_to_be_ready_after_updating_catalog":           33,
		"setting_dynamic_library_path_on_target_cluster":                34,
		"check_active_connections_on_source_cluster":                    35,
		"check_active_connections_on_target_cluster":                    36,
		"generate_data_migration_scripts":                               37,
		"execute_stats_data_migration_scripts":                          38,
		"execute_initialize_data_migration_scripts":                     39,
		"execute_finalize_data_migration_scripts":                       40,
		"execute_revert_data_migration_scripts":                         41,
		"create_backupdirs":                                             42,
		"delete_backupdir":                                              43,
		"analyze_target_cluster":                                        44,
		"ensure_gpupgrade_agents_are_running":                           45,
		"verify_gpdb_versions":                                          46,
		"verify_gpupgrade_is_installed_across_all_hosts":                47,
		"initialize_wait_for_cluster_to_be_ready":                       48,
		"wait_for_cluster_to_be_ready_before_upgrade_master":            49,
	}
)

func (x Substep) Enum() *Substep {
	p := new(Substep)
	*p = x
	return p
}

func (x Substep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Substep) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[1].Descriptor()
}

func (Substep) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[1]
}

func (x Substep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Substep.Descriptor instead.
func (Substep) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{1}
}

type Status int32

const (
	Status_unknown_status Status = 0 // http://androiddevblog.com/protocol-buffers-pitfall-adding-enum-values/
	Status_running        Status = 1
	Status_complete       Status = 2
	Status_failed         Status = 3
	Status_skipped        Status = 4
	Status_quit           Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "unknown_status",
		1: "running",
		2: "complete",
		3: "failed",
		4: "skipped",
		5: "quit",
	}
	Status_value = map[string]int32{
		"unknown_status": 0,
		"running":        1,
		"complete":       2,
		"failed":         3,
		"skipped":        4,
		"quit":           5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[2].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[2]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{2}
}

type Chunk_Type int32

const (
	Chunk_unknown Chunk_Type = 0
	Chunk_stdout  Chunk_Type = 1
	Chunk_stderr  Chunk_Type = 2
)

// Enum value maps for Chunk_Type.
var (
	Chunk_Type_name = map[int32]string{
		0: "unknown",
		1: "stdout",
		2: "stderr",
	}
	Chunk_Type_value = map[string]int32{
		"unknown": 0,
		"stdout":  1,
		"stderr":  2,
	}
)

func (x Chunk_Type) Enum() *Chunk_Type {
	p := new(Chunk_Type)
	*p = x
	return p
}

func (x Chunk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chunk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cli_to_hub_proto_enumTypes[3].Descriptor()
}

func (Chunk_Type) Type() protoreflect.EnumType {
	return &file_cli_to_hub_proto_enumTypes[3]
}

func (x Chunk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chunk_Type.Descriptor instead.
func (Chunk_Type) EnumDescriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{12, 0}
}

type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskFreeRatio    float64 `protobuf:"fixed64,1,opt,name=diskFreeRatio,proto3" json:"diskFreeRatio,omitempty"`
	ParentBackupDirs string  `protobuf:"bytes,2,opt,name=parentBackupDirs,proto3" json:"parentBackupDirs,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{0}
}

func (x *InitializeRequest) GetDiskFreeRatio() float64 {
	if x != nil {
		return x.DiskFreeRatio
	}
	return 0
}

func (x *InitializeRequest) GetParentBackupDirs() string {
	if x != nil {
		return x.ParentBackupDirs
	}
	return ""
}

type InitializeCreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicLibraryPath  string `protobuf:"bytes,1,opt,name=dynamicLibraryPath,proto3" json:"dynamicLibraryPath,omitempty"`
	PgUpgradeVerbose    bool   `protobuf:"varint,2,opt,name=pgUpgradeVerbose,proto3" json:"pgUpgradeVerbose,omitempty"`
	SkipPgUpgradeChecks bool   `protobuf:"varint,3,opt,name=skipPgUpgradeChecks,proto3" json:"skipPgUpgradeChecks,omitempty"`
}

func (x *InitializeCreateClusterRequest) Reset() {
	*x = InitializeCreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeCreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeCreateClusterRequest) ProtoMessage() {}

func (x *InitializeCreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeCreateClusterRequest.ProtoReflect.Descriptor instead.
func (*InitializeCreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeCreateClusterRequest) GetDynamicLibraryPath() string {
	if x != nil {
		return x.DynamicLibraryPath
	}
	return ""
}

func (x *InitializeCreateClusterRequest) GetPgUpgradeVerbose() bool {
	if x != nil {
		return x.PgUpgradeVerbose
	}
	return false
}

func (x *InitializeCreateClusterRequest) GetSkipPgUpgradeChecks() bool {
	if x != nil {
		return x.SkipPgUpgradeChecks
	}
	return false
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgUpgradeVerbose    bool   `protobuf:"varint,1,opt,name=pgUpgradeVerbose,proto3" json:"pgUpgradeVerbose,omitempty"`
	SkipPgUpgradeChecks bool   `protobuf:"varint,2,opt,name=skipPgUpgradeChecks,proto3" json:"skipPgUpgradeChecks,omitempty"`
	ParentBackupDirs    string `protobuf:"bytes,3,opt,name=parentBackupDirs,proto3" json:"parentBackupDirs,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{2}
}

func (x *ExecuteRequest) GetPgUpgradeVerbose() bool {
	if x != nil {
		return x.PgUpgradeVerbose
	}
	return false
}

func (x *ExecuteRequest) GetSkipPgUpgradeChecks() bool {
	if x != nil {
		return x.SkipPgUpgradeChecks
	}
	return false
}

func (x *ExecuteRequest) GetParentBackupDirs() string {
	if x != nil {
		return x.ParentBackupDirs
	}
	return ""
}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{3}
}

type RevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevertRequest) Reset() {
	*x = RevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertRequest) ProtoMessage() {}

func (x *RevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertRequest.ProtoReflect.Descriptor instead.
func (*RevertRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{4}
}

type RestartAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartAgentsRequest) Reset() {
	*x = RestartAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartAgentsRequest) ProtoMessage() {}

func (x *RestartAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartAgentsRequest.ProtoReflect.Descriptor instead.
func (*RestartAgentsRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{5}
}

type RestartAgentsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentHosts []string `protobuf:"bytes,1,rep,name=agentHosts,proto3" json:"agentHosts,omitempty"`
}

func (x *RestartAgentsReply) Reset() {
	*x = RestartAgentsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartAgentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartAgentsReply) ProtoMessage() {}

func (x *RestartAgentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartAgentsReply.ProtoReflect.Descriptor instead.
func (*RestartAgentsReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{6}
}

func (x *RestartAgentsReply) GetAgentHosts() []string {
	if x != nil {
		return x.AgentHosts
	}
	return nil
}

type StopServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServicesRequest) Reset() {
	*x = StopServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServicesRequest) ProtoMessage() {}

func (x *StopServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServicesRequest.ProtoReflect.Descriptor instead.
func (*StopServicesRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{7}
}

type StopServicesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServicesReply) Reset() {
	*x = StopServicesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServicesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServicesReply) ProtoMessage() {}

func (x *StopServicesReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServicesReply.ProtoReflect.Descriptor instead.
func (*StopServicesReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{8}
}

type SubstepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step   Substep `protobuf:"varint,1,opt,name=step,proto3,enum=idl.Substep" json:"step,omitempty"`
	Status Status  `protobuf:"varint,2,opt,name=status,proto3,enum=idl.Status" json:"status,omitempty"`
}

func (x *SubstepStatus) Reset() {
	*x = SubstepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstepStatus) ProtoMessage() {}

func (x *SubstepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstepStatus.ProtoReflect.Descriptor instead.
func (*SubstepStatus) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{9}
}

func (x *SubstepStatus) GetStep() Substep {
	if x != nil {
		return x.Step
	}
	return Substep_unknown_substep
}

func (x *SubstepStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_unknown_status
}

type PrepareInitClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareInitClusterRequest) Reset() {
	*x = PrepareInitClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareInitClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareInitClusterRequest) ProtoMessage() {}

func (x *PrepareInitClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareInitClusterRequest.ProtoReflect.Descriptor instead.
func (*PrepareInitClusterRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{10}
}

type PrepareInitClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareInitClusterReply) Reset() {
	*x = PrepareInitClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareInitClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareInitClusterReply) ProtoMessage() {}

func (x *PrepareInitClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareInitClusterReply.ProtoReflect.Descriptor instead.
func (*PrepareInitClusterReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{11}
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffer []byte     `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Type   Chunk_Type `protobuf:"varint,2,opt,name=type,proto3,enum=idl.Chunk_Type" json:"type,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{12}
}

func (x *Chunk) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *Chunk) GetType() Chunk_Type {
	if x != nil {
		return x.Type
	}
	return Chunk_unknown
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//
	//	*Message_Chunk
	//	*Message_Status
	//	*Message_Response
	Contents isMessage_Contents `protobuf_oneof:"contents"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{13}
}

func (m *Message) GetContents() isMessage_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Message) GetChunk() *Chunk {
	if x, ok := x.GetContents().(*Message_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *Message) GetStatus() *SubstepStatus {
	if x, ok := x.GetContents().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (x *Message) GetResponse() *Response {
	if x, ok := x.GetContents().(*Message_Response); ok {
		return x.Response
	}
	return nil
}

type isMessage_Contents interface {
	isMessage_Contents()
}

type Message_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"`
}

type Message_Status struct {
	Status *SubstepStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type Message_Response struct {
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3,oneof"`
}

func (*Message_Chunk) isMessage_Contents() {}

func (*Message_Status) isMessage_Contents() {}

func (*Message_Response) isMessage_Contents() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//
	//	*Response_InitializeResponse
	//	*Response_ExecuteResponse
	//	*Response_FinalizeResponse
	//	*Response_RevertResponse
	Contents isResponse_Contents `protobuf_oneof:"contents"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{14}
}

func (m *Response) GetContents() isResponse_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Response) GetInitializeResponse() *InitializeResponse {
	if x, ok := x.GetContents().(*Response_InitializeResponse); ok {
		return x.InitializeResponse
	}
	return nil
}

func (x *Response) GetExecuteResponse() *ExecuteResponse {
	if x, ok := x.GetContents().(*Response_ExecuteResponse); ok {
		return x.ExecuteResponse
	}
	return nil
}

func (x *Response) GetFinalizeResponse() *FinalizeResponse {
	if x, ok := x.GetContents().(*Response_FinalizeResponse); ok {
		return x.FinalizeResponse
	}
	return nil
}

func (x *Response) GetRevertResponse() *RevertResponse {
	if x, ok := x.GetContents().(*Response_RevertResponse); ok {
		return x.RevertResponse
	}
	return nil
}

type isResponse_Contents interface {
	isResponse_Contents()
}

type Response_InitializeResponse struct {
	InitializeResponse *InitializeResponse `protobuf:"bytes,3,opt,name=initializeResponse,proto3,oneof"`
}

type Response_ExecuteResponse struct {
	ExecuteResponse *ExecuteResponse `protobuf:"bytes,4,opt,name=executeResponse,proto3,oneof"`
}

type Response_FinalizeResponse struct {
	FinalizeResponse *FinalizeResponse `protobuf:"bytes,5,opt,name=finalizeResponse,proto3,oneof"`
}

type Response_RevertResponse struct {
	RevertResponse *RevertResponse `protobuf:"bytes,6,opt,name=revertResponse,proto3,oneof"`
}

func (*Response_InitializeResponse) isResponse_Contents() {}

func (*Response_ExecuteResponse) isResponse_Contents() {}

func (*Response_FinalizeResponse) isResponse_Contents() {}

func (*Response_RevertResponse) isResponse_Contents() {}

type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAllMirrorsAndStandby bool `protobuf:"varint,1,opt,name=HasAllMirrorsAndStandby,proto3" json:"HasAllMirrorsAndStandby,omitempty"`
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{15}
}

func (x *InitializeResponse) GetHasAllMirrorsAndStandby() bool {
	if x != nil {
		return x.HasAllMirrorsAndStandby
	}
	return false
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intermediate []byte `protobuf:"bytes,1,opt,name=intermediate,proto3" json:"intermediate,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{16}
}

func (x *ExecuteResponse) GetIntermediate() []byte {
	if x != nil {
		return x.Intermediate
	}
	return nil
}

type FinalizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                                 []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	LogArchiveDirectory                    string `protobuf:"bytes,2,opt,name=LogArchiveDirectory,proto3" json:"LogArchiveDirectory,omitempty"`
	ArchivedSourceCoordinatorDataDirectory string `protobuf:"bytes,3,opt,name=ArchivedSourceCoordinatorDataDirectory,proto3" json:"ArchivedSourceCoordinatorDataDirectory,omitempty"`
	UpgradeID                              string `protobuf:"bytes,4,opt,name=UpgradeID,proto3" json:"UpgradeID,omitempty"`
}

func (x *FinalizeResponse) Reset() {
	*x = FinalizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeResponse) ProtoMessage() {}

func (x *FinalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeResponse.ProtoReflect.Descriptor instead.
func (*FinalizeResponse) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{17}
}

func (x *FinalizeResponse) GetTarget() []byte {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FinalizeResponse) GetLogArchiveDirectory() string {
	if x != nil {
		return x.LogArchiveDirectory
	}
	return ""
}

func (x *FinalizeResponse) GetArchivedSourceCoordinatorDataDirectory() string {
	if x != nil {
		return x.ArchivedSourceCoordinatorDataDirectory
	}
	return ""
}

func (x *FinalizeResponse) GetUpgradeID() string {
	if x != nil {
		return x.UpgradeID
	}
	return ""
}

type RevertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source              []byte `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	LogArchiveDirectory string `protobuf:"bytes,2,opt,name=LogArchiveDirectory,proto3" json:"LogArchiveDirectory,omitempty"`
}

func (x *RevertResponse) Reset() {
	*x = RevertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertResponse) ProtoMessage() {}

func (x *RevertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertResponse.ProtoReflect.Descriptor instead.
func (*RevertResponse) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{18}
}

func (x *RevertResponse) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RevertResponse) GetLogArchiveDirectory() string {
	if x != nil {
		return x.LogArchiveDirectory
	}
	return ""
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{19}
}

func (x *GetConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetConfigReply) Reset() {
	*x = GetConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReply) ProtoMessage() {}

func (x *GetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReply.ProtoReflect.Descriptor instead.
func (*GetConfigReply) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{20}
}

func (x *GetConfigReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Used to set the gRPC status details that the CLI converts to a NextActions
// error type to be displayed to the user.
type NextActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextActions string `protobuf:"bytes,1,opt,name=nextActions,proto3" json:"nextActions,omitempty"`
}

func (x *NextActions) Reset() {
	*x = NextActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cli_to_hub_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextActions) ProtoMessage() {}

func (x *NextActions) ProtoReflect() protoreflect.Message {
	mi := &file_cli_to_hub_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextActions.ProtoReflect.Descriptor instead.
func (*NextActions) Descriptor() ([]byte, []int) {
	return file_cli_to_hub_proto_rawDescGZIP(), []int{21}
}

func (x *NextActions) GetNextActions() string {
	if x != nil {
		return x.NextActions
	}
	return ""
}

var File_cli_to_hub_proto protoreflect.FileDescriptor

var file_cli_to_hub_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x69, 0x64, 0x6c, 0x22, 0x65, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x67, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70,
	0x50, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x67,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69,
	0x70, 0x50, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x73, 0x22, 0x11, 0x0a, 0x0f,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56, 0x0a, 0x0d, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x23, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x19, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x71, 0x0a, 0x05, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x64, 0x6c, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x10, 0x02, 0x22, 0x94, 0x01,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e,
	0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x48, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x22, 0x35,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x0e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x4c, 0x6f, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x5a, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x10, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x10, 0x05, 0x2a, 0xb4, 0x0c, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x13, 0x0a, 0x0f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x65, 0x70, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x75, 0x62, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x09,
	0x12, 0x11, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x10,
	0x10, 0x12, 0x1b, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x10, 0x11, 0x12, 0x1c,
	0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10,
	0x13, 0x12, 0x13, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x10, 0x15, 0x12, 0x22,
	0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x72, 0x73,
	0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x69, 0x72, 0x73, 0x10, 0x17,
	0x12, 0x17, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x69, 0x72, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x1b, 0x12, 0x18,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x70, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x1d, 0x12,
	0x1d, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x0f,
	0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x1f, 0x12,
	0x41, 0x0a, 0x3d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x10, 0x20, 0x12, 0x37, 0x0a, 0x33, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x10, 0x21, 0x12, 0x32, 0x0a, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x22, 0x12,
	0x2e, 0x0a, 0x2a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x23, 0x12,
	0x2e, 0x0a, 0x2a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x24, 0x12,
	0x23, 0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x10, 0x25, 0x12, 0x28, 0x0a, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x10, 0x26, 0x12, 0x2d,
	0x0a, 0x29, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x10, 0x27, 0x12, 0x2b, 0x0a,
	0x27, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x10, 0x28, 0x12, 0x29, 0x0a, 0x25, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x69, 0x72, 0x73, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x69, 0x72,
	0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x10, 0x2c, 0x12, 0x27,
	0x0a, 0x23, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x67, 0x70, 0x64, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x2e, 0x12, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x70, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x10, 0x2f, 0x12, 0x2b, 0x0a, 0x27, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x30, 0x12, 0x36, 0x0a, 0x32, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x31, 0x2a, 0x5a, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x71, 0x75, 0x69, 0x74, 0x10, 0x05, 0x32, 0xf0, 0x03, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x54, 0x6f,
	0x48, 0x75, 0x62, 0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x17, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x30, 0x0a,
	0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x32, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x2e, 0x69, 0x64,
	0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x12, 0x2e,
	0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x15, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x69, 0x64, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2d, 0x64, 0x62, 0x2f, 0x67, 0x70, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x69,
	0x64, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cli_to_hub_proto_rawDescOnce sync.Once
	file_cli_to_hub_proto_rawDescData = file_cli_to_hub_proto_rawDesc
)

func file_cli_to_hub_proto_rawDescGZIP() []byte {
	file_cli_to_hub_proto_rawDescOnce.Do(func() {
		file_cli_to_hub_proto_rawDescData = protoimpl.X.CompressGZIP(file_cli_to_hub_proto_rawDescData)
	})
	return file_cli_to_hub_proto_rawDescData
}

var file_cli_to_hub_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cli_to_hub_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_cli_to_hub_proto_goTypes = []interface{}{
	(Step)(0),                              // 0: idl.Step
	(Substep)(0),                           // 1: idl.Substep
	(Status)(0),                            // 2: idl.Status
	(Chunk_Type)(0),                        // 3: idl.Chunk.Type
	(*InitializeRequest)(nil),              // 4: idl.InitializeRequest
	(*InitializeCreateClusterRequest)(nil), // 5: idl.InitializeCreateClusterRequest
	(*ExecuteRequest)(nil),                 // 6: idl.ExecuteRequest
	(*FinalizeRequest)(nil),                // 7: idl.FinalizeRequest
	(*RevertRequest)(nil),                  // 8: idl.RevertRequest
	(*RestartAgentsRequest)(nil),           // 9: idl.RestartAgentsRequest
	(*RestartAgentsReply)(nil),             // 10: idl.RestartAgentsReply
	(*StopServicesRequest)(nil),            // 11: idl.StopServicesRequest
	(*StopServicesReply)(nil),              // 12: idl.StopServicesReply
	(*SubstepStatus)(nil),                  // 13: idl.SubstepStatus
	(*PrepareInitClusterRequest)(nil),      // 14: idl.PrepareInitClusterRequest
	(*PrepareInitClusterReply)(nil),        // 15: idl.PrepareInitClusterReply
	(*Chunk)(nil),                          // 16: idl.Chunk
	(*Message)(nil),                        // 17: idl.Message
	(*Response)(nil),                       // 18: idl.Response
	(*InitializeResponse)(nil),             // 19: idl.InitializeResponse
	(*ExecuteResponse)(nil),                // 20: idl.ExecuteResponse
	(*FinalizeResponse)(nil),               // 21: idl.FinalizeResponse
	(*RevertResponse)(nil),                 // 22: idl.RevertResponse
	(*GetConfigRequest)(nil),               // 23: idl.GetConfigRequest
	(*GetConfigReply)(nil),                 // 24: idl.GetConfigReply
	(*NextActions)(nil),                    // 25: idl.NextActions
}
var file_cli_to_hub_proto_depIdxs = []int32{
	1,  // 0: idl.SubstepStatus.step:type_name -> idl.Substep
	2,  // 1: idl.SubstepStatus.status:type_name -> idl.Status
	3,  // 2: idl.Chunk.type:type_name -> idl.Chunk.Type
	16, // 3: idl.Message.chunk:type_name -> idl.Chunk
	13, // 4: idl.Message.status:type_name -> idl.SubstepStatus
	18, // 5: idl.Message.response:type_name -> idl.Response
	19, // 6: idl.Response.initializeResponse:type_name -> idl.InitializeResponse
	20, // 7: idl.Response.executeResponse:type_name -> idl.ExecuteResponse
	21, // 8: idl.Response.finalizeResponse:type_name -> idl.FinalizeResponse
	22, // 9: idl.Response.revertResponse:type_name -> idl.RevertResponse
	4,  // 10: idl.CliToHub.Initialize:input_type -> idl.InitializeRequest
	5,  // 11: idl.CliToHub.InitializeCreateCluster:input_type -> idl.InitializeCreateClusterRequest
	6,  // 12: idl.CliToHub.Execute:input_type -> idl.ExecuteRequest
	7,  // 13: idl.CliToHub.Finalize:input_type -> idl.FinalizeRequest
	8,  // 14: idl.CliToHub.Revert:input_type -> idl.RevertRequest
	23, // 15: idl.CliToHub.GetConfig:input_type -> idl.GetConfigRequest
	9,  // 16: idl.CliToHub.RestartAgents:input_type -> idl.RestartAgentsRequest
	11, // 17: idl.CliToHub.StopServices:input_type -> idl.StopServicesRequest
	17, // 18: idl.CliToHub.Initialize:output_type -> idl.Message
	17, // 19: idl.CliToHub.InitializeCreateCluster:output_type -> idl.Message
	17, // 20: idl.CliToHub.Execute:output_type -> idl.Message
	17, // 21: idl.CliToHub.Finalize:output_type -> idl.Message
	17, // 22: idl.CliToHub.Revert:output_type -> idl.Message
	24, // 23: idl.CliToHub.GetConfig:output_type -> idl.GetConfigReply
	10, // 24: idl.CliToHub.RestartAgents:output_type -> idl.RestartAgentsReply
	12, // 25: idl.CliToHub.StopServices:output_type -> idl.StopServicesReply
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cli_to_hub_proto_init() }
func file_cli_to_hub_proto_init() {
	if File_cli_to_hub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cli_to_hub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeCreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartAgentsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServicesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareInitClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareInitClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cli_to_hub_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cli_to_hub_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Message_Chunk)(nil),
		(*Message_Status)(nil),
		(*Message_Response)(nil),
	}
	file_cli_to_hub_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Response_InitializeResponse)(nil),
		(*Response_ExecuteResponse)(nil),
		(*Response_FinalizeResponse)(nil),
		(*Response_RevertResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cli_to_hub_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cli_to_hub_proto_goTypes,
		DependencyIndexes: file_cli_to_hub_proto_depIdxs,
		EnumInfos:         file_cli_to_hub_proto_enumTypes,
		MessageInfos:      file_cli_to_hub_proto_msgTypes,
	}.Build()
	File_cli_to_hub_proto = out.File
	file_cli_to_hub_proto_rawDesc = nil
	file_cli_to_hub_proto_goTypes = nil
	file_cli_to_hub_proto_depIdxs = nil
}
