// Copyright (c) 2017-2023 VMware, Inc. or its affiliates
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: hub_to_agent.proto

package idl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_CreateBackupDirectory_FullMethodName       = "/idl.Agent/CreateBackupDirectory"
	Agent_CheckDiskSpace_FullMethodName              = "/idl.Agent/CheckDiskSpace"
	Agent_UpgradePrimaries_FullMethodName            = "/idl.Agent/UpgradePrimaries"
	Agent_RenameDirectories_FullMethodName           = "/idl.Agent/RenameDirectories"
	Agent_StopAgent_FullMethodName                   = "/idl.Agent/StopAgent"
	Agent_DeleteDataDirectories_FullMethodName       = "/idl.Agent/DeleteDataDirectories"
	Agent_DeleteBackupDirectory_FullMethodName       = "/idl.Agent/DeleteBackupDirectory"
	Agent_DeleteStateDirectory_FullMethodName        = "/idl.Agent/DeleteStateDirectory"
	Agent_DeleteTablespaceDirectories_FullMethodName = "/idl.Agent/DeleteTablespaceDirectories"
	Agent_ArchiveLogDirectory_FullMethodName         = "/idl.Agent/ArchiveLogDirectory"
	Agent_RsyncDataDirectories_FullMethodName        = "/idl.Agent/RsyncDataDirectories"
	Agent_RsyncTablespaceDirectories_FullMethodName  = "/idl.Agent/RsyncTablespaceDirectories"
	Agent_RestorePrimariesPgControl_FullMethodName   = "/idl.Agent/RestorePrimariesPgControl"
	Agent_UpdateConfiguration_FullMethodName         = "/idl.Agent/UpdateConfiguration"
	Agent_RenameTablespaces_FullMethodName           = "/idl.Agent/RenameTablespaces"
	Agent_CreateRecoveryConf_FullMethodName          = "/idl.Agent/CreateRecoveryConf"
	Agent_AddReplicationEntries_FullMethodName       = "/idl.Agent/AddReplicationEntries"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	CreateBackupDirectory(ctx context.Context, in *CreateBackupDirectoryRequest, opts ...grpc.CallOption) (*CreateBackupDirectoryReply, error)
	CheckDiskSpace(ctx context.Context, in *CheckSegmentDiskSpaceRequest, opts ...grpc.CallOption) (*CheckDiskSpaceReply, error)
	UpgradePrimaries(ctx context.Context, in *UpgradePrimariesRequest, opts ...grpc.CallOption) (*UpgradePrimariesReply, error)
	RenameDirectories(ctx context.Context, in *RenameDirectoriesRequest, opts ...grpc.CallOption) (*RenameDirectoriesReply, error)
	StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentReply, error)
	DeleteDataDirectories(ctx context.Context, in *DeleteDataDirectoriesRequest, opts ...grpc.CallOption) (*DeleteDataDirectoriesReply, error)
	DeleteBackupDirectory(ctx context.Context, in *DeleteBackupDirectoryRequest, opts ...grpc.CallOption) (*DeleteBackupDirectoryReply, error)
	DeleteStateDirectory(ctx context.Context, in *DeleteStateDirectoryRequest, opts ...grpc.CallOption) (*DeleteStateDirectoryReply, error)
	DeleteTablespaceDirectories(ctx context.Context, in *DeleteTablespaceRequest, opts ...grpc.CallOption) (*DeleteTablespaceReply, error)
	ArchiveLogDirectory(ctx context.Context, in *ArchiveLogDirectoryRequest, opts ...grpc.CallOption) (*ArchiveLogDirectoryReply, error)
	RsyncDataDirectories(ctx context.Context, in *RsyncRequest, opts ...grpc.CallOption) (*RsyncReply, error)
	RsyncTablespaceDirectories(ctx context.Context, in *RsyncRequest, opts ...grpc.CallOption) (*RsyncReply, error)
	RestorePrimariesPgControl(ctx context.Context, in *RestorePgControlRequest, opts ...grpc.CallOption) (*RestorePgControlReply, error)
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationReply, error)
	RenameTablespaces(ctx context.Context, in *RenameTablespacesRequest, opts ...grpc.CallOption) (*RenameTablespacesReply, error)
	CreateRecoveryConf(ctx context.Context, in *CreateRecoveryConfRequest, opts ...grpc.CallOption) (*CreateRecoveryConfReply, error)
	AddReplicationEntries(ctx context.Context, in *AddReplicationEntriesRequest, opts ...grpc.CallOption) (*AddReplicationEntriesReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) CreateBackupDirectory(ctx context.Context, in *CreateBackupDirectoryRequest, opts ...grpc.CallOption) (*CreateBackupDirectoryReply, error) {
	out := new(CreateBackupDirectoryReply)
	err := c.cc.Invoke(ctx, Agent_CreateBackupDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CheckDiskSpace(ctx context.Context, in *CheckSegmentDiskSpaceRequest, opts ...grpc.CallOption) (*CheckDiskSpaceReply, error) {
	out := new(CheckDiskSpaceReply)
	err := c.cc.Invoke(ctx, Agent_CheckDiskSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) UpgradePrimaries(ctx context.Context, in *UpgradePrimariesRequest, opts ...grpc.CallOption) (*UpgradePrimariesReply, error) {
	out := new(UpgradePrimariesReply)
	err := c.cc.Invoke(ctx, Agent_UpgradePrimaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RenameDirectories(ctx context.Context, in *RenameDirectoriesRequest, opts ...grpc.CallOption) (*RenameDirectoriesReply, error) {
	out := new(RenameDirectoriesReply)
	err := c.cc.Invoke(ctx, Agent_RenameDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentReply, error) {
	out := new(StopAgentReply)
	err := c.cc.Invoke(ctx, Agent_StopAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteDataDirectories(ctx context.Context, in *DeleteDataDirectoriesRequest, opts ...grpc.CallOption) (*DeleteDataDirectoriesReply, error) {
	out := new(DeleteDataDirectoriesReply)
	err := c.cc.Invoke(ctx, Agent_DeleteDataDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteBackupDirectory(ctx context.Context, in *DeleteBackupDirectoryRequest, opts ...grpc.CallOption) (*DeleteBackupDirectoryReply, error) {
	out := new(DeleteBackupDirectoryReply)
	err := c.cc.Invoke(ctx, Agent_DeleteBackupDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteStateDirectory(ctx context.Context, in *DeleteStateDirectoryRequest, opts ...grpc.CallOption) (*DeleteStateDirectoryReply, error) {
	out := new(DeleteStateDirectoryReply)
	err := c.cc.Invoke(ctx, Agent_DeleteStateDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteTablespaceDirectories(ctx context.Context, in *DeleteTablespaceRequest, opts ...grpc.CallOption) (*DeleteTablespaceReply, error) {
	out := new(DeleteTablespaceReply)
	err := c.cc.Invoke(ctx, Agent_DeleteTablespaceDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ArchiveLogDirectory(ctx context.Context, in *ArchiveLogDirectoryRequest, opts ...grpc.CallOption) (*ArchiveLogDirectoryReply, error) {
	out := new(ArchiveLogDirectoryReply)
	err := c.cc.Invoke(ctx, Agent_ArchiveLogDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RsyncDataDirectories(ctx context.Context, in *RsyncRequest, opts ...grpc.CallOption) (*RsyncReply, error) {
	out := new(RsyncReply)
	err := c.cc.Invoke(ctx, Agent_RsyncDataDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RsyncTablespaceDirectories(ctx context.Context, in *RsyncRequest, opts ...grpc.CallOption) (*RsyncReply, error) {
	out := new(RsyncReply)
	err := c.cc.Invoke(ctx, Agent_RsyncTablespaceDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RestorePrimariesPgControl(ctx context.Context, in *RestorePgControlRequest, opts ...grpc.CallOption) (*RestorePgControlReply, error) {
	out := new(RestorePgControlReply)
	err := c.cc.Invoke(ctx, Agent_RestorePrimariesPgControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationReply, error) {
	out := new(UpdateConfigurationReply)
	err := c.cc.Invoke(ctx, Agent_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RenameTablespaces(ctx context.Context, in *RenameTablespacesRequest, opts ...grpc.CallOption) (*RenameTablespacesReply, error) {
	out := new(RenameTablespacesReply)
	err := c.cc.Invoke(ctx, Agent_RenameTablespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CreateRecoveryConf(ctx context.Context, in *CreateRecoveryConfRequest, opts ...grpc.CallOption) (*CreateRecoveryConfReply, error) {
	out := new(CreateRecoveryConfReply)
	err := c.cc.Invoke(ctx, Agent_CreateRecoveryConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddReplicationEntries(ctx context.Context, in *AddReplicationEntriesRequest, opts ...grpc.CallOption) (*AddReplicationEntriesReply, error) {
	out := new(AddReplicationEntriesReply)
	err := c.cc.Invoke(ctx, Agent_AddReplicationEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations should embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	CreateBackupDirectory(context.Context, *CreateBackupDirectoryRequest) (*CreateBackupDirectoryReply, error)
	CheckDiskSpace(context.Context, *CheckSegmentDiskSpaceRequest) (*CheckDiskSpaceReply, error)
	UpgradePrimaries(context.Context, *UpgradePrimariesRequest) (*UpgradePrimariesReply, error)
	RenameDirectories(context.Context, *RenameDirectoriesRequest) (*RenameDirectoriesReply, error)
	StopAgent(context.Context, *StopAgentRequest) (*StopAgentReply, error)
	DeleteDataDirectories(context.Context, *DeleteDataDirectoriesRequest) (*DeleteDataDirectoriesReply, error)
	DeleteBackupDirectory(context.Context, *DeleteBackupDirectoryRequest) (*DeleteBackupDirectoryReply, error)
	DeleteStateDirectory(context.Context, *DeleteStateDirectoryRequest) (*DeleteStateDirectoryReply, error)
	DeleteTablespaceDirectories(context.Context, *DeleteTablespaceRequest) (*DeleteTablespaceReply, error)
	ArchiveLogDirectory(context.Context, *ArchiveLogDirectoryRequest) (*ArchiveLogDirectoryReply, error)
	RsyncDataDirectories(context.Context, *RsyncRequest) (*RsyncReply, error)
	RsyncTablespaceDirectories(context.Context, *RsyncRequest) (*RsyncReply, error)
	RestorePrimariesPgControl(context.Context, *RestorePgControlRequest) (*RestorePgControlReply, error)
	UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationReply, error)
	RenameTablespaces(context.Context, *RenameTablespacesRequest) (*RenameTablespacesReply, error)
	CreateRecoveryConf(context.Context, *CreateRecoveryConfRequest) (*CreateRecoveryConfReply, error)
	AddReplicationEntries(context.Context, *AddReplicationEntriesRequest) (*AddReplicationEntriesReply, error)
}

// UnimplementedAgentServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) CreateBackupDirectory(context.Context, *CreateBackupDirectoryRequest) (*CreateBackupDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupDirectory not implemented")
}
func (UnimplementedAgentServer) CheckDiskSpace(context.Context, *CheckSegmentDiskSpaceRequest) (*CheckDiskSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDiskSpace not implemented")
}
func (UnimplementedAgentServer) UpgradePrimaries(context.Context, *UpgradePrimariesRequest) (*UpgradePrimariesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePrimaries not implemented")
}
func (UnimplementedAgentServer) RenameDirectories(context.Context, *RenameDirectoriesRequest) (*RenameDirectoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDirectories not implemented")
}
func (UnimplementedAgentServer) StopAgent(context.Context, *StopAgentRequest) (*StopAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAgent not implemented")
}
func (UnimplementedAgentServer) DeleteDataDirectories(context.Context, *DeleteDataDirectoriesRequest) (*DeleteDataDirectoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataDirectories not implemented")
}
func (UnimplementedAgentServer) DeleteBackupDirectory(context.Context, *DeleteBackupDirectoryRequest) (*DeleteBackupDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupDirectory not implemented")
}
func (UnimplementedAgentServer) DeleteStateDirectory(context.Context, *DeleteStateDirectoryRequest) (*DeleteStateDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStateDirectory not implemented")
}
func (UnimplementedAgentServer) DeleteTablespaceDirectories(context.Context, *DeleteTablespaceRequest) (*DeleteTablespaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTablespaceDirectories not implemented")
}
func (UnimplementedAgentServer) ArchiveLogDirectory(context.Context, *ArchiveLogDirectoryRequest) (*ArchiveLogDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveLogDirectory not implemented")
}
func (UnimplementedAgentServer) RsyncDataDirectories(context.Context, *RsyncRequest) (*RsyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RsyncDataDirectories not implemented")
}
func (UnimplementedAgentServer) RsyncTablespaceDirectories(context.Context, *RsyncRequest) (*RsyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RsyncTablespaceDirectories not implemented")
}
func (UnimplementedAgentServer) RestorePrimariesPgControl(context.Context, *RestorePgControlRequest) (*RestorePgControlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestorePrimariesPgControl not implemented")
}
func (UnimplementedAgentServer) UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedAgentServer) RenameTablespaces(context.Context, *RenameTablespacesRequest) (*RenameTablespacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameTablespaces not implemented")
}
func (UnimplementedAgentServer) CreateRecoveryConf(context.Context, *CreateRecoveryConfRequest) (*CreateRecoveryConfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecoveryConf not implemented")
}
func (UnimplementedAgentServer) AddReplicationEntries(context.Context, *AddReplicationEntriesRequest) (*AddReplicationEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicationEntries not implemented")
}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_CreateBackupDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateBackupDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateBackupDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateBackupDirectory(ctx, req.(*CreateBackupDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CheckDiskSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSegmentDiskSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CheckDiskSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CheckDiskSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CheckDiskSpace(ctx, req.(*CheckSegmentDiskSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_UpgradePrimaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePrimariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).UpgradePrimaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_UpgradePrimaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).UpgradePrimaries(ctx, req.(*UpgradePrimariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RenameDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RenameDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RenameDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RenameDirectories(ctx, req.(*RenameDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StopAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StopAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_StopAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StopAgent(ctx, req.(*StopAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteDataDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteDataDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteDataDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteDataDirectories(ctx, req.(*DeleteDataDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteBackupDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteBackupDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteBackupDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteBackupDirectory(ctx, req.(*DeleteBackupDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteStateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteStateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteStateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteStateDirectory(ctx, req.(*DeleteStateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteTablespaceDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTablespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteTablespaceDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteTablespaceDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteTablespaceDirectories(ctx, req.(*DeleteTablespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ArchiveLogDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveLogDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ArchiveLogDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ArchiveLogDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ArchiveLogDirectory(ctx, req.(*ArchiveLogDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RsyncDataDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RsyncDataDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RsyncDataDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RsyncDataDirectories(ctx, req.(*RsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RsyncTablespaceDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RsyncTablespaceDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RsyncTablespaceDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RsyncTablespaceDirectories(ctx, req.(*RsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RestorePrimariesPgControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestorePgControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RestorePrimariesPgControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RestorePrimariesPgControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RestorePrimariesPgControl(ctx, req.(*RestorePgControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).UpdateConfiguration(ctx, req.(*UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RenameTablespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameTablespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RenameTablespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RenameTablespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RenameTablespaces(ctx, req.(*RenameTablespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CreateRecoveryConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecoveryConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateRecoveryConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateRecoveryConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateRecoveryConf(ctx, req.(*CreateRecoveryConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddReplicationEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicationEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddReplicationEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_AddReplicationEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddReplicationEntries(ctx, req.(*AddReplicationEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBackupDirectory",
			Handler:    _Agent_CreateBackupDirectory_Handler,
		},
		{
			MethodName: "CheckDiskSpace",
			Handler:    _Agent_CheckDiskSpace_Handler,
		},
		{
			MethodName: "UpgradePrimaries",
			Handler:    _Agent_UpgradePrimaries_Handler,
		},
		{
			MethodName: "RenameDirectories",
			Handler:    _Agent_RenameDirectories_Handler,
		},
		{
			MethodName: "StopAgent",
			Handler:    _Agent_StopAgent_Handler,
		},
		{
			MethodName: "DeleteDataDirectories",
			Handler:    _Agent_DeleteDataDirectories_Handler,
		},
		{
			MethodName: "DeleteBackupDirectory",
			Handler:    _Agent_DeleteBackupDirectory_Handler,
		},
		{
			MethodName: "DeleteStateDirectory",
			Handler:    _Agent_DeleteStateDirectory_Handler,
		},
		{
			MethodName: "DeleteTablespaceDirectories",
			Handler:    _Agent_DeleteTablespaceDirectories_Handler,
		},
		{
			MethodName: "ArchiveLogDirectory",
			Handler:    _Agent_ArchiveLogDirectory_Handler,
		},
		{
			MethodName: "RsyncDataDirectories",
			Handler:    _Agent_RsyncDataDirectories_Handler,
		},
		{
			MethodName: "RsyncTablespaceDirectories",
			Handler:    _Agent_RsyncTablespaceDirectories_Handler,
		},
		{
			MethodName: "RestorePrimariesPgControl",
			Handler:    _Agent_RestorePrimariesPgControl_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _Agent_UpdateConfiguration_Handler,
		},
		{
			MethodName: "RenameTablespaces",
			Handler:    _Agent_RenameTablespaces_Handler,
		},
		{
			MethodName: "CreateRecoveryConf",
			Handler:    _Agent_CreateRecoveryConf_Handler,
		},
		{
			MethodName: "AddReplicationEntries",
			Handler:    _Agent_AddReplicationEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub_to_agent.proto",
}
